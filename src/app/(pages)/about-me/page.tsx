"use client";
import Image from "next/image";
import { motion } from "framer-motion";
import TechIcons from "@/components/techIcons";
import Link from "next/link";
import {
  SiDotnet,
  SiLaravel,
  SiNestjs,
  SiNextdotjs,
  SiAngular,
  SiMicrosoftazure,
  SiDocker,
  SiPostgresql,
  SiMongodb,
  SiRedis,
  SiKubernetes,
  SiNodedotjs,
  SiMysql,
  SiMicrosoftsqlserver,
  SiElasticsearch,
  SiSwagger,
  SiTailwindcss,
  SiRabbitmq,
  SiD3Dotjs,
} from "react-icons/si";
import { FiExternalLink, FiGithub } from "react-icons/fi";

const stats = [
  { label: "YEARS OF EXPERIENCE", value: "7" },
  { label: "SATISFIED CLIENTS", value: "15" },
  { label: "FINISHED PROJECTS", value: "35" },
  { label: "ACHIEVEMENTS", value: "NaN" },
];

const services = [
  {
    title: "Backend Development",
    description: "Scalable and efficient server-side solutions",
    icon: <SiDotnet />,
  },
  {
    title: "Frontend Development",
    description: "Interactive and responsive user interfaces",
    icon: <SiNextdotjs />,
  },
  {
    title: "Database Management",
    description: "Optimized data storage and retrieval",
    icon: <SiPostgresql />,
  },
  {
    title: "Cloud Services",
    description: "AWS and Azure cloud infrastructure",
    icon: <SiMicrosoftazure />,
  },
];

const experiences = [
  {
    company: "Forwardie",
    role: "Backend Developer",
    period: "08/2023 – Present",
    achievements: [
      "Contributed to the development and optimization of a large-scale microservices project using PHP 7.4 and Laravel 8.",
      "Played a key role in the architectural and system design phase of all new features.",
      "Designed the infrastructure and architecture for AI automations to be developed using OpenAI API (Assistant and Chat Completions).",
      "Created a Event-Driven Architecture using Laravel Events and Pusher for real-time notifications.",
      "Advocated for the adoption of gRPC as the preferred communication protocol between microservices.",
    ],
    technologies: [SiLaravel, SiMysql, SiRedis, SiDotnet, SiNestjs, SiDocker],
  },
  {
    company: "Mallconomy",
    role: "Backend Developer",
    period: "03/2023 – 07/2023",
    achievements: [
      "Achieved a increase in user engagement through performance enhancements.",
      "Led the Docker and Kubernetes infrastructure migration.",
      "Developed an automated system leveraging Google Sheet API for ban operations and reduced manual work by 80%.",
      "Successfully integrated Web3 tools on Node.js to retrieve NFT data from Smart Contracts.",
    ],
    technologies: [SiDotnet, SiMongodb, SiRedis, SiNodedotjs, SiDocker],
  },
  {
    company: "Siskon Automation & Software",
    role: "Backend Developer",
    period: "01/2022 – 03/2023",
    achievements: [
      "Planned, developed, refactored, and debugged software components for machine communication in .NET Core.",
      "Implemented advanced Thread Management algorithms resulting in a 30% reduction in application response time.",
      "Developed an automated data extraction tool for XML output files generated by machines every minute, reducing manual work by 90%.",
      "Improved code maintainability and scalability with optimized T-SQL queries.",
      "Mentored two interns and played a role in their technical growth.",
    ],
    technologies: [
      SiDotnet,
      SiMicrosoftsqlserver,
      SiMicrosoftazure,
      SiKubernetes,
    ],
  },
  {
    company: "Amatis",
    role: "Fullstack Developer",
    period: "01/2021 – 12/2021",
    achievements: [
      "Spearheaded end-to-end development of microservices-based, AI-driven healthcare projects.",
      "Successfully implemented Hangfire for event monitoring and management, handling 84 events, and improving overall system reliability and efficiency.",
      "Developed user role-specific and subscribable mail and notification services, enhancing the user experience and increasing engagement by around 25%.",
      "Led the development of advanced filtering features for navigation properties using Expressions and Reflections, resulting in a 40% reduction in user search time and improved data accessibility.",
      "Prototyped and delivered a new product within two days, showcasing strong design and development skills and meeting strict deadlines.",
      "Designed and developed the infrastructure for use in future projects by Clean Architecture approach, CQRS pattern, AOP, and OOP principles.",
    ],
    technologies: [
      SiDotnet,
      SiAngular,
      SiPostgresql,
      SiDocker,
      SiRabbitmq,
      SiD3Dotjs,
    ],
  },
];

const projects = [
  {
    name: "Financial OCR",
    description:
      "AI-powered OCR for financial documents for easy data extraction.",
    longDescription:
      "A financial OCR application that extracts data from invoices, receipts, and other financial documents using Google Document AI and OpenAI API." +
      "The backend is built with .NET 8 and the frontend with Next.js 14 and Tailwind CSS. The application is deployed on Azure Cloud with Docker by utilizing .NET Aspire.",
    image: "/images/FinancialOCR.gif",
    liveLink: "https://github.com/ScannyBear/FinancialOCR-Client",
    sourceCode: "https://github.com/ScannyBear/FinancialOCR-Backend",
    techStack: [
      SiDotnet,
      SiNextdotjs,
      SiTailwindcss,
      SiMicrosoftazure,
      SiMicrosoftsqlserver,
      SiDocker,
      SiSwagger,
      SiElasticsearch,
      SiRedis,
    ],
    designPatterns: [
      "OOP",
      "SOLID",
      "Clean Code",
      "CQRS",
      "AOP",
      "Repository Pattern",
      "Factory Pattern",
      "Adapter Pattern",
      "Strategy Pattern",
      "Template Method Pattern",
      "Event-Driven Architecture",
      "Clean Architecture",
    ],
    icon: <SiDotnet />,
    color: "from-green-600 to-green-400",
  },
  {
    name: "Clean Architecture Project",
    description:
      "Robust infrastructure using Clean Architecture, CQRS, and more.",
    longDescription:
      "A project utilizing the Clean Architecture approach with .NET Core 6. Technologies include Automapper, MediatR, FluentValidation, Entity Framework Core, Swagger, Redis, Elasticsearch, Docker, and more.",
    image:
      "https://blog.cleancoder.com/uncle-bob/images/2012-08-13-the-clean-architecture/CleanArchitecture.jpg",
    liveLink: "https://github.com/haliltokszz/Kodlama.io.Devs",
    sourceCode: "https://github.com/haliltokszz/Kodlama.io.Devs",
    techStack: [
      SiDotnet,
      SiMicrosoftsqlserver,
      SiElasticsearch,
      SiRedis,
      SiDocker,
      SiSwagger,
    ],
    designPatterns: [
      "OOP",
      "SOLID",
      "Clean Code",
      "CQRS",
      "AOP",
      "Repository Pattern",
      "Factory Pattern",
    ],
    icon: <SiDotnet />,
    color: "from-blue-600 to-blue-400",
  },
  {
    name: "Rent a Car",
    description: "End-to-end car rental web application.",
    longDescription:
      "Developed with .NET Core and Angular 12, implementing Cross-Cutting Concerns with AOP principles. The project includes a layered architecture, JWT authentication, and Swagger documentation. ",
    image: "https://gh-card.dev/repos/haliltokszz/RentaCar-Frontend.svg",
    liveLink: "https://github.com/haliltokszz/RentaCar",
    sourceCode: "https://github.com/haliltokszz/RentaCar",
    techStack: [SiDotnet, SiAngular, SiSwagger, SiPostgresql],
    designPatterns: [
      "OOP",
      "SOLID",
      "Clean Code",
      "CQRS",
      "AOP",
      "Repository Pattern",
      "Factory Pattern",
      "Adapter Pattern",
    ],
    icon: <SiDotnet />,
    color: "from-yellow-600 to-yellow-400",
  },
  {
    name: "HR Management System",
    description:
      "Desktop application for HR management using advanced data structures.",
    longDescription:
      "A desktop application built with C# for HR management, utilizing data structures like Binary Trees and Graphs.",
    image:
      "https://res.cloudinary.com/practicaldev/image/fetch/s--KW1vPrlM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b0ib4migxql3ugwzfqoa.png",
    liveLink:
      "https://github.com/haliltokszz/VeriYapilariProje-InsanKaynaklariBilgiSistemi",
    sourceCode:
      "https://github.com/haliltokszz/VeriYapilariProje-InsanKaynaklariBilgiSistemi",
    techStack: [SiDotnet],
    designPatterns: ["Data Structures", "Algorithms"],
    icon: <SiDotnet />,
    color: "from-red-600 to-red-400",
  },
];

export default function AboutMe() {
  return (
    <div className="min-h-screen flex flex-col justify-center items-center p-8 my-6 relative">
      {/* Background layer */}
      <div className="absolute inset-0 bg-gradient-to-br from-gray-900 to-black opacity-25 z-0"></div>

      <motion.section
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        transition={{ duration: 0.5 }}
        className="max-w-7xl mx-auto w-full space-y-20 relative z-10"
      >
        {/* Hero Section */}
        <div className="flex flex-col lg:flex-row items-center justify-between space-y-8 lg:space-y-0">
          <div className="lg:w-1/2 flex flex-col space-y-6">
            <h1 className="text-4xl lg:text-6xl font-bold text-white">
              Crafting <span className="text-blue-500">robust</span> backend
              solutions.
            </h1>
            <p className="text-gray-300 text-lg">
              With 7 years of experience in backend development, I specialize in
              creating scalable, efficient, and secure server-side applications.
            </p>
            <div className="grid grid-cols-2 gap-4 mt-8">
              {stats.map((stat) => (
                <div key={stat.label} className="flex flex-col items-center">
                  <p className="text-3xl lg:text-4xl font-bold text-blue-500">
                    {stat.value}
                  </p>
                  <p className="text-sm lg:text-base text-gray-400">
                    {stat.label}
                  </p>
                </div>
              ))}
            </div>
          </div>
          <div className="lg:w-1/2 flex justify-center lg:justify-end">
            <Image
              src="/images/profile.jpg"
              alt="Profile Image"
              width={500}
              height={500}
              className="rounded-lg shadow-lg"
            />
          </div>
        </div>

        {/* Services Section */}
        <motion.div
          initial={{ y: 50, opacity: 0 }}
          animate={{ y: 0, opacity: 1 }}
          transition={{ duration: 0.5, delay: 0.2 }}
        >
          <h2 className="text-3xl font-bold mb-8 text-white">Services</h2>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
            {services.map((service, index) => (
              <div
                key={index}
                className="bg-gradient-to-br from-gray-800 to-gray-900 p-6 rounded-lg shadow-lg transform hover:scale-105 transition duration-300 group"
              >
                <div className="text-4xl mb-4 text-blue-500 group-hover:text-purple-500 transition-colors duration-300">
                  {service.icon}
                </div>
                <h3 className="text-xl font-semibold mb-2 text-white">
                  {service.title}
                </h3>
                <p className="text-gray-400 group-hover:text-gray-300 transition-colors duration-300">
                  {service.description}
                </p>
              </div>
            ))}
          </div>
        </motion.div>

        {/* Experience Section */}
        <motion.div
          initial={{ y: 50, opacity: 0 }}
          animate={{ y: 0, opacity: 1 }}
          transition={{ duration: 0.5, delay: 0.4 }}
        >
          <h2 className="text-3xl font-bold mb-8 text-white">Experience</h2>
          <div className="space-y-12">
            {experiences.map((exp, index) => (
              <motion.div
                key={index}
                className="bg-gray-800 p-6 rounded-lg shadow-lg"
                initial={{ x: index % 2 === 0 ? -50 : 50, opacity: 0 }}
                whileInView={{ x: 0, opacity: 1 }}
                transition={{ duration: 0.5 }}
                viewport={{ once: true }}
              >
                <div className="flex flex-col md:flex-row justify-between items-start mb-4">
                  <div>
                    <h3 className="text-2xl font-semibold text-white">
                      {exp.role}
                    </h3>
                    <p className="text-blue-500 text-lg">{exp.company}</p>
                  </div>
                  <p className="text-gray-400 mt-2 md:mt-0">{exp.period}</p>
                </div>
                <ul className="list-disc list-inside text-gray-300 mb-4 space-y-2">
                  {exp.achievements.map((achievement, i) => (
                    <motion.li
                      key={i}
                      initial={{ opacity: 0, x: -20 }}
                      animate={{ opacity: 1, x: 0 }}
                      transition={{ delay: 0.2 + i * 0.1 }}
                    >
                      {achievement}
                    </motion.li>
                  ))}
                </ul>
                <div className="flex flex-wrap gap-3">
                  {exp.technologies.map((Tech, i) => (
                    <Tech
                      key={i}
                      className="text-2xl text-gray-400 hover:text-blue-500 transition-colors duration-300"
                    />
                  ))}
                </div>
              </motion.div>
            ))}
          </div>
        </motion.div>

        {/* Skills Section remains the same */}
        <motion.div
          initial={{ y: 50, opacity: 0 }}
          animate={{ y: 0, opacity: 1 }}
          transition={{ duration: 0.5, delay: 0.6 }}
        >
          <h2 className="text-3xl font-bold mb-8 text-white">Skills</h2>
          <TechIcons size={50} />
        </motion.div>

        {/* Projects Section */}
        <motion.div
          initial={{ y: 50, opacity: 0 }}
          animate={{ y: 0, opacity: 1 }}
          transition={{ duration: 0.5, delay: 0.8 }}
        >
          <h2 className="text-3xl font-bold mb-8 text-white">
            Featured Projects
          </h2>
          <div className="space-y-12">
            {projects.map((project, index) => (
              <motion.div
                key={index}
                className={`bg-gradient-to-br ${project.color} p-6 rounded-lg shadow-lg overflow-hidden relative`}
                whileHover={{ scale: 1.02 }}
                transition={{ type: "spring", stiffness: 300 }}
              >
                <div className="flex flex-col lg:flex-row gap-8">
                  <div className="lg:w-1/3">
                    <Image
                      src={project.image}
                      alt={project.name}
                      width={400}
                      height={300}
                      className="rounded-lg shadow-md"
                    />
                  </div>
                  <div className="lg:w-2/3">
                    <h3 className="text-2xl font-semibold mb-2 text-white flex items-center gap-2">
                      {project.icon}
                      {project.name}
                    </h3>
                    <p className="text-gray-200 mb-4">
                      {project.longDescription}
                    </p>
                    <div className="mb-4">
                      <h4 className="text-lg font-semibold text-white mb-2">
                        Tech Stack:
                      </h4>
                      <div className="flex flex-wrap gap-3">
                        {project.techStack.map((Tech, i) => (
                          <Tech key={i} className="text-2xl text-white" />
                        ))}
                      </div>
                    </div>
                    <div className="mb-4">
                      <h4 className="text-lg font-semibold text-white mb-2">
                        Design Patterns & Principles:
                      </h4>
                      <ul className="list-disc list-inside text-gray-200">
                        {project.designPatterns.map((pattern, i) => (
                          <li key={i}>{pattern}</li>
                        ))}
                      </ul>
                    </div>
                    <div className="flex gap-4">
                      <Link
                        href={project.liveLink}
                        className="flex items-center gap-2 text-white hover:text-blue-300 transition-colors duration-300"
                      >
                        <FiExternalLink /> Live Demo
                      </Link>
                      <Link
                        href={project.sourceCode}
                        className="flex items-center gap-2 text-white hover:text-blue-300 transition-colors duration-300"
                      >
                        <FiGithub /> Source Code
                      </Link>
                    </div>
                  </div>
                </div>
              </motion.div>
            ))}
          </div>
        </motion.div>
      </motion.section>
    </div>
  );
}
